// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OSFirebaseMessagingLib
@_exported import OSFirebaseMessagingLib
import Swift
import UIKit
import UserNotifications
import _Concurrency
public enum FirebaseMessagingErrors : Swift.Int, Foundation.CustomNSError, Foundation.LocalizedError {
  case registrationError
  case unregistrationError
  case subscriptionError
  case unsubscriptionError
  case obtainingTokenError
  case deletingTokenError
  case settingBadgeNumberError
  case gettingBadgeNumberError
  case requestPermissionsError
  case permissionsDeniedByUser
  case invalidConfigurations
  case errorSendingNotification
  public var description: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias CompletionHandler = (Swift.Result<Swift.String?, Swift.Error>) -> Swift.Void
public protocol MessagingProtocol {
  func getGeneralTopic() -> Swift.String
  func getToken(completion: @escaping OSFirebaseMessagingLib.CompletionHandler)
  func deleteToken(completion: @escaping OSFirebaseMessagingLib.CompletionHandler)
  func subscribe(toTopic topic: Swift.String, completion: @escaping OSFirebaseMessagingLib.CompletionHandler)
  func unsubscribe(fromTopic topic: Swift.String, completion: @escaping OSFirebaseMessagingLib.CompletionHandler)
}
public class FirebaseConfiguration {
  public static let googleServicesFileName: Swift.String
  public init(fileName: Swift.String = googleServicesFileName, bundle: Foundation.Bundle = Bundle.main)
  public func getGoogleServicesPath() -> Swift.String?
  @objc deinit
}
public protocol FirebaseMessagingCallbackProtocol {
  func callback(result: Swift.String?, error: OSFirebaseMessagingLib.FirebaseMessagingErrors?)
}
public protocol FirebaseMessagingEventProtocol {
  func event(data: Swift.String)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class FirebaseMessagingApplicationDelegate : ObjectiveC.NSObject, UIKit.UIApplicationDelegate {
  @objc @_Concurrency.MainActor(unsafe) public static let shared: OSFirebaseMessagingLib.FirebaseMessagingApplicationDelegate
  @_Concurrency.MainActor(unsafe) public var eventDelegate: OSFirebaseMessagingLib.FirebaseMessagingEventProtocol?
  @_Concurrency.MainActor(unsafe) @objc public func application(_ application: UIKit.UIApplication, didFinishLaunchingWithOptions launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]? = nil) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func application(_ application: UIKit.UIApplication, didReceiveRemoteNotification userInfo: [Swift.AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIKit.UIBackgroundFetchResult) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc public func application(_ application: UIKit.UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Foundation.Data)
  @objc deinit
}
extension OSFirebaseMessagingLib.FirebaseMessagingApplicationDelegate : UserNotifications.UNUserNotificationCenterDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
}
extension UserNotifications.UNUserNotificationCenter {
  
  #if compiler(>=5.3) && $AsyncAwait
  public func sendLocalNotification(title: Swift.String, body: Swift.String, badge: Swift.Int) async -> Swift.Result<Swift.Bool, Swift.Error>
  #endif

}
public protocol UIApplicationProtocol {
  func getBadge() -> Swift.Int
  func setBadge(badge: Swift.Int)
}
extension UIKit.UIApplication : OSFirebaseMessagingLib.UIApplicationProtocol {
  @_Concurrency.MainActor(unsafe) public func getBadge() -> Swift.Int
  @_Concurrency.MainActor(unsafe) public func setBadge(badge: Swift.Int)
}
public class MessagingManager : OSFirebaseMessagingLib.MessagingProtocol {
  public init()
  public func getGeneralTopic() -> Swift.String
  public func getToken(completion: @escaping OSFirebaseMessagingLib.CompletionHandler)
  public func deleteToken(completion: @escaping OSFirebaseMessagingLib.CompletionHandler)
  public func subscribe(toTopic topic: Swift.String, completion: @escaping OSFirebaseMessagingLib.CompletionHandler)
  public func unsubscribe(fromTopic topic: Swift.String, completion: @escaping OSFirebaseMessagingLib.CompletionHandler)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers open class FirebaseMessagingController : ObjectiveC.NSObject {
  convenience public init(delegate: OSFirebaseMessagingLib.FirebaseMessagingCallbackProtocol, firebaseManager: OSFirebaseMessagingLib.MessagingManager = MessagingManager())
  public func registerDevice()
  public func getToken()
  public func deleteToken()
  public func subscribe(topic: Swift.String)
  public func unsubscribe(fromTopic topic: Swift.String)
  public func clearNotifications()
  public func sendLocalNotification(title: Swift.String, body: Swift.String, badge: Swift.Int)
  public func setBadge(badge: Swift.Int)
  public func getBadge()
  public func unregisterDevice()
  @objc deinit
}
extension OSFirebaseMessagingLib.FirebaseMessagingErrors : Swift.Equatable {}
extension OSFirebaseMessagingLib.FirebaseMessagingErrors : Swift.Hashable {}
extension OSFirebaseMessagingLib.FirebaseMessagingErrors : Swift.RawRepresentable {}
